{"name": "test_Populate_TmpFile[testbed.yml]", "status": "broken", "statusDetails": {"message": "AttributeError: 'str' object has no attribute 'exists'", "trace": "test_convert_yml_to_dict = {'Connection': {'DUT1': {'interfaces': [{'LocalPort': 'Ethernet1', 'RemoteDevice': 'DUT2', 'RemotePort': 'Ethernet11'}...'access': {'ip': '10.1.1.2', 'port': 22, 'protocol': 'ssh'}, 'credentials': {'password': 'onl', 'username': 'admin'}}}}\n\n    def test_Populate_TmpFile(test_convert_yml_to_dict):\n        global new_filename\n        temp = test_convert_yml_to_dict\n        print(temp)\n        temp1 = './../tmp/'\n        new_filename = temp1 + new_filename\n        print('\\n')\n        with open(new_filename, 'w+') as f:\n            DUT1_HwType = temp['HardwareList']['DUT1']['Hardware_type']\n            DUT1_Protocol = temp['HardwareList']['DUT1']['access']['protocol']\n            DUT1_IP = temp['HardwareList']['DUT1']['access']['ip']\n            DUT1_Port = temp['HardwareList']['DUT1']['access']['port']\n            DUT1_Username = temp['HardwareList']['DUT1']['credentials']['username']\n            DUT1_Password = temp['HardwareList']['DUT1']['credentials']['password']\n            DUT2_HwType = temp['HardwareList']['DUT2']['Hardware_type']\n            DUT2_Protocol = temp['HardwareList']['DUT2']['access']['protocol']\n            DUT2_IP = temp['HardwareList']['DUT2']['access']['ip']\n            DUT2_Port = temp['HardwareList']['DUT2']['access']['port']\n            DUT2_Username = temp['HardwareList']['DUT2']['credentials']['username']\n            DUT2_Password = temp['HardwareList']['DUT2']['credentials']['password']\n    \n            f.write(str('DUT1_HwType') + \"=\" + DUT1_HwType + '\\n')\n            f.write(str('DUT1_Protocol') + \"=\" + DUT1_Protocol + '\\n')\n            f.write(str('DUT1_IP') + \"=\" + DUT1_IP + '\\n')\n            f.write(str('DUT1_Username') + \"=\" + DUT1_Username + '\\n')\n            f.write(str('DUT1_Password') + \"=\" + DUT1_Password + '\\n')\n            f.write(str('DUT2_HwType') + \"=\" + DUT2_HwType + '\\n')\n            f.write(str('DUT2_Protocol') + \"=\" + DUT2_Protocol + '\\n')\n            f.write(str('DUT2_IP') + \"=\" + DUT2_IP + '\\n')\n            f.write(str('DUT2_Username') + \"=\" + DUT2_Username + '\\n')\n            f.write(str('DUT2_Password') + \"=\" + DUT2_Password + '\\n')\n    \n            if key == 1:\n    \n                DUT1interfaceList = temp['Connection']['DUT1']['interfaces']\n                DUT2interfaceList = temp['Connection']['DUT2']['interfaces']\n    \n                Trunk = dict()\n    \n                Trunk[1] = dict()\n                Trunk[1][2] = dict()\n    \n                Trunk[2] = dict()\n                Trunk[2][1] = dict()\n    \n                i = 0\n                j = 1\n    \n                while i < len(DUT1interfaceList):\n                    Trunk[1][2][j] = DUT1interfaceList[i]['LocalPort']\n                    f.write(str('Trunk[1][2]') + '[' + str(j) + ']' + \"=\" + Trunk[1][2][j] + '\\n')\n                    i = i + 1\n                    j = j + 1\n    \n                i = 0\n                j = 1\n    \n                while i < len(DUT2interfaceList):\n                    Trunk[2][1][j] = DUT2interfaceList[i]['LocalPort']\n                    f.write(str('Trunk[2][1]') + '[' + str(j) + ']' + \"=\" + Trunk[2][1][j] + '\\n')\n                    i = i + 1\n                    j = j + 1\n    \n>       result = path.exists(new_filename)\nE       AttributeError: 'str' object has no attribute 'exists'\n\ntest_testbed_file_parser.py:142: AttributeError"}, "parameters": [{"name": "testbed", "value": "'testbed.yml'"}], "start": 1656238060956, "stop": 1656238060956, "uuid": "a9c564dc-548f-4e7c-ad28-1c6d39872dc5", "historyId": "7fc9a49222a2f558b26bad411635e54d", "testCaseId": "361f77d1d20cb28fa38428ddf2d92161", "fullName": "test_testbed_file_parser#test_Populate_TmpFile", "labels": [{"name": "suite", "value": "test_testbed_file_parser"}, {"name": "host", "value": "alexander-Virtual-Machine"}, {"name": "thread", "value": "23966-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_testbed_file_parser"}]}