{"uid":"539ff22dcab43a6e","name":"test_CheckPSUState[testbed]","fullName":"test_19#test_CheckPSUState","historyId":"8c1206d6096757ed0456c02289b6b374","time":{"start":1662279242626,"stop":1662279243273,"duration":647},"status":"failed","statusMessage":"AssertionError: -1 != 1 : Specified key is not present in the dictionary file","statusTrace":"test_importlib = <module 'testbed' from '/data/ONLP_Automation/tmp/testbed.py'>\n\n    @pytest.mark.All\n    @pytest.mark.Sanity\n    def test_CheckPSUState(test_importlib):\n    \n        DUTInfo = test_importlib\n        val = Get_PSU_Value(DUTInfo.DUT1_IP, 1, 'State')\n        val = -1\n    \n        obj = CheckKeyValue()\n    \n>       result = obj.KeyValueMatch(val)\n\n../Scripts/test_19.py:38: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../Lib/KeyMatch.py:16: in KeyValueMatch\n    self.assertEqual(val, 1, msg=self.Failure_type(val))\n/usr/lib/python3.7/unittest/case.py:839: in assertEqual\n    assertion_func(first, second, msg=msg)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <KeyMatch.CheckKeyValue testMethod=runTest>, first = -1, second = 1\nmsg = '-1 != 1 : Specified key is not present in the dictionary file'\n\n    def _baseAssertEqual(self, first, second, msg=None):\n        \"\"\"The default assertEqual implementation, not type specific.\"\"\"\n        if not first == second:\n            standardMsg = '%s != %s' % _common_shorten_repr(first, second)\n            msg = self._formatMessage(msg, standardMsg)\n>           raise self.failureException(msg)\nE           AssertionError: -1 != 1 : Specified key is not present in the dictionary file\n\n/usr/lib/python3.7/unittest/case.py:832: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":2,"retriesStatusChange":true,"beforeStages":[{"name":"test_importlib","time":{"start":1662279242625,"stop":1662279242625,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: -1 != 1 : Specified key is not present in the dictionary file","statusTrace":"test_importlib = <module 'testbed' from '/data/ONLP_Automation/tmp/testbed.py'>\n\n    @pytest.mark.All\n    @pytest.mark.Sanity\n    def test_CheckPSUState(test_importlib):\n    \n        DUTInfo = test_importlib\n        val = Get_PSU_Value(DUTInfo.DUT1_IP, 1, 'State')\n        val = -1\n    \n        obj = CheckKeyValue()\n    \n>       result = obj.KeyValueMatch(val)\n\n../Scripts/test_19.py:38: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../Lib/KeyMatch.py:16: in KeyValueMatch\n    self.assertEqual(val, 1, msg=self.Failure_type(val))\n/usr/lib/python3.7/unittest/case.py:839: in assertEqual\n    assertion_func(first, second, msg=msg)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <KeyMatch.CheckKeyValue testMethod=runTest>, first = -1, second = 1\nmsg = '-1 != 1 : Specified key is not present in the dictionary file'\n\n    def _baseAssertEqual(self, first, second, msg=None):\n        \"\"\"The default assertEqual implementation, not type specific.\"\"\"\n        if not first == second:\n            standardMsg = '%s != %s' % _common_shorten_repr(first, second)\n            msg = self._formatMessage(msg, standardMsg)\n>           raise self.failureException(msg)\nE           AssertionError: -1 != 1 : Specified key is not present in the dictionary file\n\n/usr/lib/python3.7/unittest/case.py:832: AssertionError","steps":[],"attachments":[{"uid":"f603171e13f01e4c","name":"stdout","source":"f603171e13f01e4c.txt","type":"text/plain","size":84}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[],"labels":[{"name":"tag","value":"Sanity"},{"name":"tag","value":"All"},{"name":"suite","value":"test_19"},{"name":"host","value":"911e6075fbb9"},{"name":"thread","value":"4449-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_19"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"filename","value":"'testbed'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"bbb0d8ba9a7398ff","status":"passed","time":{"start":1662279154052,"stop":1662279154539,"duration":487}},{"uid":"50bcae21115a0cac","status":"passed","time":{"start":1662279024750,"stop":1662279025319,"duration":569}}],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":["All","Sanity"]},"source":"539ff22dcab43a6e.json","parameterValues":["'testbed'"]}